[{"/home/rodrigo/github/duopettaja/src/index.tsx":"1","/home/rodrigo/github/duopettaja/src/serviceWorker.ts":"2","/home/rodrigo/github/duopettaja/src/App.tsx":"3","/home/rodrigo/github/duopettaja/src/redux/store/index.ts":"4","/home/rodrigo/github/duopettaja/src/components/Header.tsx":"5","/home/rodrigo/github/duopettaja/src/views/Home.tsx":"6","/home/rodrigo/github/duopettaja/src/views/Lesson.tsx":"7","/home/rodrigo/github/duopettaja/src/views/FinishedLesson.tsx":"8","/home/rodrigo/github/duopettaja/src/views/Skill.tsx":"9","/home/rodrigo/github/duopettaja/src/utils/http.ts":"10","/home/rodrigo/github/duopettaja/src/models/Answer.ts":"11","/home/rodrigo/github/duopettaja/src/components/Loading.tsx":"12","/home/rodrigo/github/duopettaja/src/components/SkillCard.tsx":"13","/home/rodrigo/github/duopettaja/src/components/GuessQuestion.tsx":"14","/home/rodrigo/github/duopettaja/src/components/ProgressBar.tsx":"15","/home/rodrigo/github/duopettaja/src/components/LessonCard.tsx":"16","/home/rodrigo/github/duopettaja/src/redux/reducers/index.ts":"17","/home/rodrigo/github/duopettaja/src/redux/actions/index.ts":"18","/home/rodrigo/github/duopettaja/src/components/CompoundQuestion/index.tsx":"19","/home/rodrigo/github/duopettaja/src/components/CompoundQuestion/styled.ts":"20","/home/rodrigo/github/duopettaja/src/redux/constants/index.ts":"21"},{"size":862,"mtime":1610305847329,"results":"22","hashOfConfig":"23"},{"size":5201,"mtime":1610305847371,"results":"24","hashOfConfig":"23"},{"size":932,"mtime":1610305847298,"results":"25","hashOfConfig":"23"},{"size":130,"mtime":1610305847371,"results":"26","hashOfConfig":"23"},{"size":1468,"mtime":1610313193481,"results":"27","hashOfConfig":"23"},{"size":1308,"mtime":1610315870694,"results":"28","hashOfConfig":"23"},{"size":6486,"mtime":1610325988703,"results":"29","hashOfConfig":"23"},{"size":1245,"mtime":1610305847372,"results":"30","hashOfConfig":"23"},{"size":1904,"mtime":1610305847373,"results":"31","hashOfConfig":"23"},{"size":431,"mtime":1610305847372,"results":"32","hashOfConfig":"23"},{"size":325,"mtime":1610305847330,"results":"33","hashOfConfig":"23"},{"size":279,"mtime":1610305847313,"results":"34","hashOfConfig":"23"},{"size":1896,"mtime":1610315690762,"results":"35","hashOfConfig":"23"},{"size":2075,"mtime":1610305847312,"results":"36","hashOfConfig":"23"},{"size":540,"mtime":1610305847313,"results":"37","hashOfConfig":"23"},{"size":1971,"mtime":1610324981995,"results":"38","hashOfConfig":"23"},{"size":461,"mtime":1610305847340,"results":"39","hashOfConfig":"23"},{"size":175,"mtime":1610305847340,"results":"40","hashOfConfig":"23"},{"size":2404,"mtime":1610305847298,"results":"41","hashOfConfig":"23"},{"size":1158,"mtime":1610305847312,"results":"42","hashOfConfig":"23"},{"size":86,"mtime":1610305847340,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1buckzi",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/rodrigo/github/duopettaja/src/index.tsx",[],["92","93"],"/home/rodrigo/github/duopettaja/src/serviceWorker.ts",[],"/home/rodrigo/github/duopettaja/src/App.tsx",[],"/home/rodrigo/github/duopettaja/src/redux/store/index.ts",[],"/home/rodrigo/github/duopettaja/src/components/Header.tsx",[],"/home/rodrigo/github/duopettaja/src/views/Home.tsx",["94"],"/home/rodrigo/github/duopettaja/src/views/Lesson.tsx",[],"/home/rodrigo/github/duopettaja/src/views/FinishedLesson.tsx",[],"/home/rodrigo/github/duopettaja/src/views/Skill.tsx",[],"/home/rodrigo/github/duopettaja/src/utils/http.ts",["95"],"import axios, { AxiosRequestConfig } from \"axios\";\n\nconst header = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Content-Type\": \"application/json\",\n} as AxiosRequestConfig;\n\nexport const get = (url: string) => axios.get(url, header);\nexport const post = (url: string, data: any) => axios.post(url, data, header);\nexport const put = (url: string, data: any) => axios.post(url, data, header);\n\nexport default {\n  get,\n  post,\n  put,\n};\n","/home/rodrigo/github/duopettaja/src/models/Answer.ts",[],"/home/rodrigo/github/duopettaja/src/components/Loading.tsx",["96"],"/* eslint-disable no-unused-vars */\nimport React from \"react\";\n/* eslint-enable no-unused-vars */\n\nexport default () => {\n  return (\n    <div className=\"row loading\">\n      <i className=\"fa fa-spinner fa-spin\" style={{fontSize: \"100px\", color: \"#20a8e9\"}}></i>\n    </div>\n  );\n}\n","/home/rodrigo/github/duopettaja/src/components/SkillCard.tsx",[],"/home/rodrigo/github/duopettaja/src/components/GuessQuestion.tsx",["97","98"],"import React from \"react\";\nimport styled, { StyledComponent } from \"styled-components\";\nimport Word from \"../models/Word\";\n\ninterface IQuestionOptionProps {\n  selected: boolean;\n}\n\ninterface IProps {\n  options: Word[];\n  question: string;\n  onChange: Function;\n}\n\ninterface IState {\n  answer: Word;\n  question: string;\n  options: Word[];\n}\n\nconst QuestionsContainer: StyledComponent<\"div\", any, {}, never> = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  margin: 0 10% 0 10%;\n`;\n\nconst QuestionContainer: StyledComponent<\"div\", any, {}, never> = styled.div`\n  width: 50%;\n  height: 30px;\n`;\n\nconst QuestionOption: StyledComponent<\"div\", any, IQuestionOptionProps> = styled.div`\n  background-color: ${(props: IQuestionOptionProps) => props.selected ? \"aqua\" : \"white\"};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-style: solid;\n  border-color: gray;\n  margin: 5px;\n`;\n\nconst GuessQuestion = ({question, options, onChange}: any) => {\n  const [localQuestion,] = React.useState(question);\n  const [localOptions, setLocalOptions] = React.useState([...options]);\n\n  const getAnswer = (option: Word) => {\n    cleanSelectedAnswers();\n    const newOptions = [\n      ...localOptions.filter((o) => o.id !== option.id),\n      option\n    ].sort((a, b) => a.id - b.id);\n    setLocalOptions(newOptions);\n    option.selected = true;\n    onChange(option);\n  }\n\n  const cleanSelectedAnswers = () => {\n    options.forEach((option: Word) => {\n      option.selected = false;\n    });\n  }\n\n  return (\n    <div>\n      <div className=\"row\">\n        <h4>{localQuestion}</h4>\n      </div>\n      <QuestionsContainer>\n        {localOptions.map((option: any) =>\n        <QuestionContainer key={option.id}>\n          <QuestionOption selected={option.selected} onClick={() => getAnswer(option)}>\n            {option.text}\n          </QuestionOption>\n        </QuestionContainer>,\n        )}\n      </QuestionsContainer>\n    </div>\n  );\n}\n\n(GuessQuestion as any).whyDidYouRender = true;\n\nexport default GuessQuestion;\n","/home/rodrigo/github/duopettaja/src/components/ProgressBar.tsx",[],"/home/rodrigo/github/duopettaja/src/components/LessonCard.tsx",[],"/home/rodrigo/github/duopettaja/src/redux/reducers/index.ts",[],"/home/rodrigo/github/duopettaja/src/redux/actions/index.ts",["99"],"import { REACH_GOAL } from \"../constants\";\n\nexport const reachGoal = () => {\n  const action = {\n    type: REACH_GOAL,\n  };\n  return action;\n};\n\nexport default {\n  reachGoal\n}\n","/home/rodrigo/github/duopettaja/src/components/CompoundQuestion/index.tsx",["100"],"import React from \"react\";\nimport Word from \"../../models/Word\";\nimport * as S from \"./styled\";\n\ninterface IProps {\n  question: string;\n  options: Word[];\n  onChange: Function;\n}\n\ninterface IState {\n  question: string;\n  selectedWords: Word[];\n  availableWords: Word[];\n}\n\nconst byIdAscending: (a: Word, b: Word) => number = (a: Word, b: Word) => a.id - b.id;\n\nconst CompoundQuestion = ({question, options, onChange}: IProps) => {\n  const [availableWords, setAvailableWords] = React.useState<Word[]>([...options]);\n  const [selectedWords, setSelectedWords] = React.useState<Word[]>([]);\n\n  const selectWord = (option: Word): void => {\n    if (option.selected) {\n      return;\n    }\n    option.selected = true;\n    const chosenWords: Word[] = [...selectedWords, option];\n    const availableWords: Word[] = [\n      option,\n      ...options.filter((el: Word) => el.id !== option.id),\n    ].sort(byIdAscending);\n    setAvailableWords(availableWords);\n    setSelectedWords(chosenWords);\n    getAnswer(chosenWords);\n  }\n\n  const deselectWord = (option: Word): void => {\n    option.selected = false;\n    const chosenWords: Word[] = selectedWords.filter((el: Word) => el.id !== option.id);\n    const availableWords: Word[] = [\n      option,\n      ...options.filter((el: Word) => el.id !== option.id)]\n    .sort(byIdAscending);\n    setAvailableWords(availableWords);\n    setSelectedWords(chosenWords);\n  }\n\n  const getAnswer = (selectedWords: Word[]): void => {\n    onChange(selectedWords);\n  }\n\n  return (\n    <div>\n      <div className=\"row\">\n        <h4>{question}</h4>\n      </div>\n      <div className=\"row\">\n        <S.SelectedWordsContainer>\n          <S.SelectedWordsBox>\n            {selectedWords.map((option: Word) =>\n              <S.WordBox key={option.id} selected={false} onClick={() => deselectWord(option)}>\n                {option.text}\n              </S.WordBox>,\n            )}\n          </S.SelectedWordsBox>\n        </S.SelectedWordsContainer>\n      </div>\n      <div className=\"row\">\n        <S.AvailableWordsContainer>\n          {availableWords.map((option: Word) =>\n            <S.WordBox key={option.id} selected={option.selected} onClick={() => selectWord(option)}>\n              {option.text}\n            </S.WordBox>,\n          )}\n        </S.AvailableWordsContainer>\n      </div>\n    </div>\n  );\n}\n\n(CompoundQuestion as any).whyDidYouRender = true;\n\nexport default CompoundQuestion;\n","/home/rodrigo/github/duopettaja/src/components/CompoundQuestion/styled.ts",[],"/home/rodrigo/github/duopettaja/src/redux/constants/index.ts",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":8,"column":11,"nodeType":"107","messageId":"108","endLine":8,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":12,"column":1,"nodeType":"111","endLine":16,"endColumn":3},{"ruleId":"109","severity":1,"message":"112","line":5,"column":1,"nodeType":"111","endLine":11,"endColumn":2},{"ruleId":"105","severity":1,"message":"113","line":9,"column":11,"nodeType":"107","messageId":"108","endLine":9,"endColumn":17},{"ruleId":"105","severity":1,"message":"106","line":15,"column":11,"nodeType":"107","messageId":"108","endLine":15,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":10,"column":1,"nodeType":"111","endLine":12,"endColumn":2},{"ruleId":"105","severity":1,"message":"106","line":11,"column":11,"nodeType":"107","messageId":"108","endLine":11,"endColumn":17},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"@typescript-eslint/no-unused-vars","'IState' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign arrow function to a variable before exporting as module default","'IProps' is defined but never used.","no-global-assign","no-unsafe-negation"]